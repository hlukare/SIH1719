// Follow the instrucions if you want to run This small demo 



Project Report for SIH ID 1719: File API for Image and Video Processing

Introduction As part of our Smart India Hackathon (SIH) project with ID 1719, our team has implemented a system leveraging the Gemini API's File API to upload, process, and analyze media files, such as images and videos. This functionality is essential for the problem statement we are addressing, which involves monitoring classroom sessions in skill training programs. The File API allows us to handle large files efficiently, enabling seamless content generation and object detection using AI models. Below is a detailed explanation of our approach.

1. Uploading Image Files For our project, one key requirement is processing large media files. We utilized the File API to upload images of various sizes. The API supports files up to 2 GB in size, which is sufficient for our use case of classroom monitoring. Here's how we implemented the process:

We uploaded image files using the following code:
python
Copy code
sample_file = genai.upload_file(path="jetpack.jpg", display_name="Jetpack drawing")
print(f"Uploaded file as: {sample_file.uri}")
The URI generated by the File API is used as a reference for further processing. For example, we prompt the AI model to describe or analyze an image by passing the file URI to the model.
2. Verifying the Upload To ensure the images were successfully uploaded, we used the API to retrieve metadata:

python
Copy code
file = genai.get_file(name=sample_file.name)
print(f"Retrieved file: {file.display_name}")
This allows us to track and manage files efficiently during the course of the project.

3. Generating Content Using AI Once the files were uploaded, we utilized the Gemini generative model to process the image data. We combined image URIs with text prompts to generate insightful content, such as product descriptions or classroom activity summaries:

python
Copy code
model = genai.GenerativeModel(model_name="gemini-1.5-pro")
response = model.generate_content([sample_file, "Describe how this product might be manufactured."])
print(response.text)
This functionality is crucial for generating real-time reports and summaries in our system.

4. Handling Multiple Image Files In some cases, we needed to process multiple images at once. For example, we provided a prompt to the AI model to generate a creative output based on several images:

python
Copy code
sample_file_2 = PIL.Image.open('piranha.jpg')
sample_file_3 = PIL.Image.open('firefighter.jpg')
response = model.generate_content(["Write a jingle showing how the first image solves the problems in the second two.", sample_file, sample_file_2, sample_file_3])
print(response.text)
5. Video Processing Using the File API Our project also involves video analysis, and the File API is essential for handling large video files. We used it to upload videos up to 2 GB in size:

python
Copy code
video_file = genai.upload_file(path="GreatRedSpot.mp4")
After uploading the video, we ensured it was processed by checking its status:

python
Copy code
while video_file.state.name == "PROCESSING":
    time.sleep(10)
    video_file = genai.get_file(video_file.name)
Once the video file is in an ACTIVE state, we prompted the AI model to generate summaries, quizzes, and reports based on the video content:

python
Copy code
prompt = "Summarize the video and create a quiz."
response = model.generate_content([video_file, prompt])
print(response.text)
6. Object Detection and Bounding Box Creation As part of the classroom monitoring solution, detecting objects such as students or activity materials is critical. We used the Gemini model to retrieve bounding boxes around objects in an image:

python
Copy code
prompt = "Return a bounding box for the piranha."
response = model.generate_content([sample_file_2, prompt])
print(response.text)
The coordinates returned are used to track objects of interest in classroom sessions, enhancing our monitoring systemâ€™s capabilities.

7. File Management All files uploaded via the File API are stored for 48 hours. We can also manually delete files when they are no longer needed:

python
Copy code
genai.delete_file(video_file.name)
print(f'Deleted file {video_file.uri}')
Conclusion In this project, the File API has played a critical role in managing large media files. It allows us to efficiently upload, verify, and process images and videos while integrating seamlessly with the generative AI models we are using. This system will enable better tracking and monitoring of physical and digital classroom activities in skill training programs, making it a key component of our solution for the Smart India Hackathon.

By utilizing these advanced tools, our team has built a scalable and AI-powered system capable of addressing the needs outlined in the problem statement for SIH ID 1719.